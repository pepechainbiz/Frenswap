{
  "address": "0x40dCaf06e177036ae57B1c46f008cb42B6cC1829",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_PAIR_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auro",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        }
      ],
      "name": "disableMetaTxnsPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        }
      ],
      "name": "enableMetaTxnsPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auro",
          "type": "address"
        }
      ],
      "name": "setAuroAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1226355cefcbff2fa5441b0fffa25672f22277b9f885d300dad00e80e7435bd3",
  "receipt": {
    "to": null,
    "from": "0x5Db6efF839FcDed2b264C6eAAF0A177E58Cf0c6d",
    "contractAddress": "0x40dCaf06e177036ae57B1c46f008cb42B6cC1829",
    "transactionIndex": 1,
    "gasUsed": "3992500",
    "logsBloom": "0x
    "blockHash": "0xaf8040abab77a0b6e0568319498638f6b5c61969bd8272a6b061442393c2bf37",
    "transactionHash": "0x1226355cefcbff2fa5441b0fffa25672f22277b9f885d300dad00e80e7435bd3",
    "logs": [],
    "blockNumber": 1976,
    "cumulativeGasUsed": "4036414",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5Db6efF839FcDed2b264C6eAAF0A177E58Cf0c6d"
  ],
  "solcInputHash": "78a0069e2cea0830385ce5b91b657f36",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_PAIR_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auro\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"disableMetaTxnsPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"enableMetaTxnsPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auro\",\"type\":\"address\"}],\"name\":\"setAuroAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uniswapv2/FrenFactory.sol\":\"FrenFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/uniswapv2/FrenERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\nimport './libraries/SafeMath.sol';\\n\\ncontract FrenERC20 {\\n    using SafeMathFren for uint;\\n\\n    string public constant name = 'FrenSwap LP Token';\\n    string public constant symbol = 'FLP';\\n    uint8 public constant decimals = 18;\\n    uint  public totalSupply;\\n    mapping(address => uint) public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n\\n    address private _trustedForwarder; // remember to change before deploying\\n\\n    // Control support for EIP-2771 Meta Transactions\\n    bool public metaTxnsEnabled = false;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event MetaTxnsEnabled(address indexed caller);\\n    event MetaTxnsDisabled(address indexed caller);\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        _approve(_msgSender(), spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(_msgSender(), to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        if (allowance[from][_msgSender()] != uint(-1)) {\\n            allowance[from][_msgSender()] = allowance[from][_msgSender()].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, 'FrenSwap: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'FrenSwap: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xfb4bb89da817be04ff750a66072c807dfba3ff898434b599b338ae420e7414f7\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/FrenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\nimport './interfaces/IFrenFactory.sol';\\nimport './FrenPair.sol';\\n\\ncontract FrenFactory is IFrenFactory {\\n    bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(FrenPair).creationCode));\\n\\n    address public override feeTo;\\n    address public override feeToSetter;\\n    address public override migrator;\\n    address public override auro;\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external override view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\n        require(tokenA != tokenB, 'FrenSwap: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'FrenSwap: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'FrenSwap: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(FrenPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        FrenPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external override {\\n        require(msg.sender == feeToSetter, 'FrenSwap: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setMigrator(address _migrator) external override {\\n        require(msg.sender == feeToSetter, 'FrenSwap: FORBIDDEN');\\n        migrator = _migrator;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, 'FrenSwap: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    \\n    function setAuroAddress(address _auro) external override {\\n        require(msg.sender == feeToSetter, 'FrenSwap: FORBIDDEN');\\n        require(_auro != address(0), 'FrenSwap: INVALID_ADDRESS');\\n        auro = _auro;\\n    }\\n\\n\\n\\n    function enableMetaTxnsPair(address pairAddress) external {\\n        require(msg.sender == feeToSetter, 'FrenSwap: FORBIDDEN');\\n        require(pairAddress != address(0), 'FrenSwap: PAIR_NOT_EXISTS');\\n\\n        FrenPair pair = FrenPair(pairAddress);\\n\\n        require(!pair.metaTxnsEnabled(), 'FrenSwap: META_TXNS_ALREADY_ENABLED');\\n\\n        pair.enableMetaTxns();\\n    }\\n\\n    function disableMetaTxnsPair(address pairAddress) external {\\n        require(msg.sender == feeToSetter, 'FrenSwap: FORBIDDEN');\\n        require(pairAddress != address(0), 'FrenSwap: PAIR_NOT_EXISTS');\\n\\n        FrenPair pair = FrenPair(pairAddress);\\n\\n        require(pair.metaTxnsEnabled(), 'FrenSwap: META_TXNS_ALREADY_DISABLED');\\n\\n        pair.disableMetaTxns();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xbe593a40b139056febc98db9a63b068f371bec0701f3ad3ad0461ea4ce405099\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/FrenPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\nimport './FrenERC20.sol';\\nimport './libraries/Math.sol';\\nimport './libraries/UQ112x112.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IFrenFactory.sol';\\nimport './interfaces/IFrenCallee.sol';\\n\\ninterface IMigrator {\\n    // Return the desired amount of liquidity token that the migrator wants.\\n    function desiredLiquidity() external view returns (uint256);\\n}\\n\\ncontract FrenPair is FrenERC20 {\\n    using SafeMathFren for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint public price0CumulativeLast;\\n    uint public price1CumulativeLast;\\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    struct SwapVariables {\\n        uint112 _reserve0;\\n        uint112 _reserve1;\\n        uint balance0;\\n        uint balance1;\\n        uint amount0In;\\n        uint amount1In;\\n        uint fee;\\n    }\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'FrenSwap: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'FrenSwap: TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, 'FrenSwap: FORBIDDEN'); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'FrenSwap: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IFrenFactory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\n                uint rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint denominator = rootK.mul(5).add(rootKLast);\\n                    uint liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IERC20Fren(token0).balanceOf(address(this));\\n        uint balance1 = IERC20Fren(token1).balanceOf(address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            address migrator = IFrenFactory(factory).migrator();\\n            if (_msgSender() == migrator) {\\n                liquidity = IMigrator(migrator).desiredLiquidity();\\n                require(liquidity > 0 && liquidity != uint256(-1), \\\"Bad desired liquidity\\\");\\n            } else {\\n                require(migrator == address(0), \\\"Must not have migrator\\\");\\n                liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n            }\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'FrenSwap: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(_msgSender(), amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        uint balance0 = IERC20Fren(_token0).balanceOf(address(this));\\n        uint balance1 = IERC20Fren(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'FrenSwap: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20Fren(_token0).balanceOf(address(this));\\n        balance1 = IERC20Fren(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(_msgSender(), amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'FrenSwap: INSUFFICIENT_OUTPUT_AMOUNT');\\n        SwapVariables memory vars = SwapVariables(0, 0, 0, 0, 0, 0, 0);\\n        (vars._reserve0, vars._reserve1,) = getReserves(); // gas savings\\n        require(amount0Out < vars._reserve0 && amount1Out < vars._reserve1, 'FrenSwap: INSUFFICIENT_LIQUIDITY');\\n\\n        vars.fee = 25;\\n\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, 'FrenSwap: INVALID_TO');\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0) IFrenCallee(to).uniswapV2Call(_msgSender(), amount0Out, amount1Out, data);\\n            vars.balance0 = IERC20Fren(_token0).balanceOf(address(this));\\n            vars.balance1 = IERC20Fren(_token1).balanceOf(address(this));\\n        }\\n        vars.amount0In = vars.balance0 > vars._reserve0 - amount0Out ? vars.balance0 - (vars._reserve0 - amount0Out) : 0;\\n        vars.amount1In = vars.balance1 > vars._reserve1 - amount1Out ? vars.balance1 - (vars._reserve1 - amount1Out) : 0;\\n        require(vars.amount0In > 0 || vars.amount1In > 0, 'FrenSwap: INSUFFICIENT_INPUT_AMOUNT');\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint balance0Adjusted = vars.balance0.mul(10000).sub(vars.amount0In.mul(vars.fee));\\n            uint balance1Adjusted = vars.balance1.mul(10000).sub(vars.amount1In.mul(vars.fee));\\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint(vars._reserve0).mul(vars._reserve1).mul(10000**2), 'FrenSwap: K');\\n        }\\n\\n        _update(vars.balance0, vars.balance1, vars._reserve0, vars._reserve1);\\n        emit Swap(_msgSender(), vars.amount0In, vars.amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20Fren(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20Fren(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20Fren(token0).balanceOf(address(this)), IERC20Fren(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n\\n    function disableMetaTxns() external {\\n        require(_msgSender() == factory, 'FrenSwap: FORBIDDEN');\\n        require(metaTxnsEnabled, \\\"FrenSwap: META_TXNS_ALREADY_DISABLED\\\");\\n\\n        metaTxnsEnabled = false;\\n\\n        emit MetaTxnsDisabled(_msgSender());\\n    }\\n\\n    function enableMetaTxns() external {\\n        require(_msgSender() == factory, 'FrenSwap: FORBIDDEN');\\n        require(!metaTxnsEnabled, \\\"FrenSwap: META_TXNS_ALREADY_ENABLED\\\");\\n\\n        metaTxnsEnabled = true;\\n\\n        emit MetaTxnsEnabled(_msgSender());\\n    }\\n}\",\"keccak256\":\"0xdb13334304a6df260a0dade97410a80a7856c18bd2217f2b658ebe2d334cac94\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\ninterface IERC20Fren {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x1276aafc6909dcf23ce50484b7060f585650c6b21b37185debe5915379120847\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IFrenCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\ninterface IFrenCallee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9642008c289fe89507fa8285ec5f729ce0694e4c927883d11490d34fa3152b4d\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IFrenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\ninterface IFrenFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n    function auro() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n    function setAuroAddress(address) external;\\n}\\n\",\"keccak256\":\"0x55e80b94886ee8916768d7f587565d47d15031258b1ee48183cec843f17df873\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e34228558f68066644fac4777301ec63326ef49a21672ae0eb63dc6d0bc3206\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathFren {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0xae2c787bfa3695e48591d2d102a5724a6f07373f5f6c12c5fb3319ff8bebfef3\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x52d3d3e3062b8110ac1f3841ace3279071f8b01885e98d34582ca0093e5059e4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516147ab3803806147ab8339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b03909216919091179055614748806100636000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80635e07d17b11610097578063b0cb33fe11610066578063b0cb33fe14610250578063c9c6539614610283578063e6a43905146102be578063f46901ed146102f9576100f5565b80635e07d17b146101af5780636bd7c172146101e25780637cd07e4714610215578063a2e74af61461021d576100f5565b806321dd70e6116100d357806321dd70e61461015057806323cf311814610158578063574f2ba31461018d5780635855a25a146101a7576100f5565b8063017e7e58146100fa578063094b74151461012b5780631e3dd18b14610133575b600080fd5b61010261032c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610102610348565b6101026004803603602081101561014957600080fd5b5035610364565b610102610398565b61018b6004803603602081101561016e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166103b4565b005b610195610481565b60408051918252519081900360200190f35b610195610487565b61018b600480360360208110156101c557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610538565b61018b600480360360208110156101f857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610771565b6101026108c0565b61018b6004803603602081101561023357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108dc565b61018b6004803603602081101561026657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109a9565b6101026004803603604081101561029957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610bc5565b610102600480360360408110156102d457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610ff9565b61018b6004803603602081101561030f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661102c565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6005818154811061037157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff16331461043a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60055490565b604051610496602082016110f9565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106104fa57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016104bd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661064057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4672656e537761703a20504149525f4e4f545f45584953545300000000000000604482015290519081900360640190fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a8c95dc06040518163ffffffff1660e01b815260040160206040518083038186803b15801561068b57600080fd5b505afa15801561069f573d6000803e3d6000fd5b505050506040513d60208110156106b557600080fd5b50511561070d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806146f06023913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663578bb42d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075557600080fd5b505af1158015610769573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107f757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661087957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4672656e537761703a20494e56414c49445f4144445245535300000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff16331461096257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a2f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610ab157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4672656e537761703a20504149525f4e4f545f45584953545300000000000000604482015290519081900360640190fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a8c95dc06040518163ffffffff1660e01b815260040160206040518083038186803b158015610afc57600080fd5b505afa158015610b10573d6000803e3d6000fd5b505050506040513d6020811015610b2657600080fd5b5051610b7d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806146cc6024913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663083836406040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075557600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4672656e537761703a204944454e544943414c5f414444524553534553000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610c9f578385610ca2565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff8216610d2957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4672656e537761703a205a45524f5f4144445245535300000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff828116600090815260046020908152604080832085851684529091529020541615610dca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4672656e537761703a20504149525f4558495354530000000000000000000000604482015290519081900360640190fd5b606060405180602001610ddc906110f9565b6020820181038252601f19601f82011660405250905060008383604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f594508473ffffffffffffffffffffffffffffffffffffffff1663485cc95585856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015610eea57600080fd5b505af1158015610efe573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff84811660008181526004602081815260408084208987168086529083528185208054978d167fffffffffffffffffffffffff000000000000000000000000000000000000000098891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b600460209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110b257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6135c5806111078339019056fe60806040526005805460ff60a01b191690556001600d5534801561002257600080fd5b506040805180820182526011815270233932b729bbb0b8102628102a37b5b2b760791b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fb780362928b9d9f67e42076e4199f6d451483cd96fb2e827a6ac1b7dace85397818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600680546001600160a01b031916331790556134a98061011c6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80635a3d54931161010f578063a9059cbb116100a2578063d21220a711610071578063d21220a714610651578063d505accf14610659578063dd62ed3e146106b7578063fff6cae9146106f2576101e5565b8063a9059cbb146105d5578063ba9a7a561461060e578063bc25cf7714610616578063c45a015514610649576101e5565b80637ecebe00116100de5780637ecebe001461054657806389afcb441461057957806395d89b41146105c5578063a8c95dc0146105cd576101e5565b80635a3d5493146104d05780636a627842146104d857806370a082311461050b5780637464fc3d1461053e576101e5565b806323b872dd11610187578063485cc95511610156578063485cc95514610452578063572b6c051461048d578063578bb42d146104c05780635909c0d5146104c8576101e5565b806323b872dd146103e157806330adf81f14610424578063313ce5671461042c5780633644e5151461044a576101e5565b80630902f1ac116101c35780630902f1ac1461030a578063095ea7b3146103495780630dfe16811461039657806318160ddd146103c7576101e5565b8063022c0d9f146101ea57806306fdde03146102855780630838364014610302575b600080fd5b6102836004803603608081101561020057600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561024457600080fd5b82018360208201111561025657600080fd5b8035906020019184600183028401116401000000008311171561027857600080fd5b5090925090506106fa565b005b61028d610ed4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102c75781810151838201526020016102af565b50505050905090810190601f1680156102f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610283610f0d565b610312611097565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103826004803603604081101561035f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356110ec565b604080519115158252519081900360200190f35b61039e61110a565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103cf611126565b60408051918252519081900360200190f35b610382600480360360608110156103f757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561112c565b6103cf611288565b6104346112ac565b6040805160ff9092168252519081900360200190f35b6103cf6112b1565b6102836004803603604081101561046857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166112b7565b610382600480360360208110156104a357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611390565b6102836113df565b6103cf611581565b6103cf611587565b6103cf600480360360208110156104ee57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661158d565b6103cf6004803603602081101561052157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bb1565b6103cf611bc3565b6103cf6004803603602081101561055c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bc9565b6105ac6004803603602081101561058f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bdb565b6040805192835260208301919091528051918290030190f35b61028d612085565b6103826120be565b610382600480360360408110156105eb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356120df565b6103cf6120f3565b6102836004803603602081101561062c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166120f9565b61039e6122e6565b61039e612302565b610283600480360360e081101561066f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561231e565b6103cf600480360360408110156106cd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166125ea565b610283612607565b600d5460011461076b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4672656e537761703a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600d558415158061077e5750600084115b6107d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806133bc6024913960400191505060405180910390fd5b6107db61333a565b6040518060e0016040528060006dffffffffffffffffffffffffffff16815260200160006dffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815250905061083f611097565b506dffffffffffffffffffffffffffff9081166020840152168082528610801561087c575080602001516dffffffffffffffffffffffffffff1685105b6108e757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4672656e537761703a20494e53554646494349454e545f4c4951554944495459604482015290519081900360640190fd5b601960c082015260075460085473ffffffffffffffffffffffffffffffffffffffff91821691908116908616821480159061094e57508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b6109b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4672656e537761703a20494e56414c49445f544f000000000000000000000000604482015290519081900360640190fd5b87156109ca576109ca82878a6127ed565b86156109db576109db8187896127ed565b8315610aae578573ffffffffffffffffffffffffffffffffffffffff166310d1e85c610a056129fa565b8a8a89896040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610a9557600080fd5b505af1158015610aa9573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610b1a57600080fd5b505afa158015610b2e573d6000803e3d6000fd5b505050506040513d6020811015610b4457600080fd5b505160408085019190915280517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8316916370a08231916024808301926020929190829003018186803b158015610bb957600080fd5b505afa158015610bcd573d6000803e3d6000fd5b505050506040513d6020811015610be357600080fd5b505160608401525050805160408201516dffffffffffffffffffffffffffff90911687900310610c14576000610c32565b8581600001516dffffffffffffffffffffffffffff16038160400151035b8160800181815250508481602001516dffffffffffffffffffffffffffff1603816060015111610c63576000610c81565b8481602001516dffffffffffffffffffffffffffff16038160600151035b60a08201526080810151151580610c9c575060008160a00151115b610cf1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806134076023913960400191505060405180910390fd5b6000610d28610d118360c001518460800151612a3d90919063ffffffff16565b6040840151610d2290612710612a3d565b90612ac3565b90506000610d5b610d4a8460c001518560a00151612a3d90919063ffffffff16565b6060850151610d2290612710612a3d565b9050610da66305f5e100610da085602001516dffffffffffffffffffffffffffff1686600001516dffffffffffffffffffffffffffff16612a3d90919063ffffffff16565b90612a3d565b610db08383612a3d565b1015610e1d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4672656e537761703a204b000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050610e3b8160400151826060015183600001518460200151612b35565b8373ffffffffffffffffffffffffffffffffffffffff16610e5a6129fa565b73ffffffffffffffffffffffffffffffffffffffff167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82283608001518460a001518a8a6040518085815260200184815260200183815260200182815260200194505050505060405180910390a350506001600d5550505050565b6040518060400160405280601181526020017f4672656e53776170204c5020546f6b656e00000000000000000000000000000081525081565b60065473ffffffffffffffffffffffffffffffffffffffff16610f2e6129fa565b73ffffffffffffffffffffffffffffffffffffffff1614610fb057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b60055474010000000000000000000000000000000000000000900460ff16611023576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806133986024913960400191505060405180910390fd5b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556110536129fa565b73ffffffffffffffffffffffffffffffffffffffff167f096be170ccc67847e55535e7d8334b2afedd95805baedc160005addb9144745060405160405180910390a2565b6009546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b60006111006110f96129fa565b8484612deb565b5060015b92915050565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908261117c6129fa565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146112735773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020526040812061121d918491906111f06129fa565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205490612ac3565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602052604081209061124b6129fa565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020555b61127e848484612e5a565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b60065473ffffffffffffffffffffffffffffffffffffffff16331461133d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b6007805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560088054929093169116179055565b60055460009074010000000000000000000000000000000000000000900460ff1680156113d7575060055473ffffffffffffffffffffffffffffffffffffffff8381169116145b90505b919050565b60065473ffffffffffffffffffffffffffffffffffffffff166114006129fa565b73ffffffffffffffffffffffffffffffffffffffff161461148257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b60055474010000000000000000000000000000000000000000900460ff16156114f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806134516023913960400191505060405180910390fd5b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017905561153d6129fa565b73ffffffffffffffffffffffffffffffffffffffff167f92e4c08d47b71e8dc051232b8e475ec296489a67a4ba5cca88ff20fb6ac499e660405160405180910390a2565b600a5481565b600b5481565b6000600d5460011461160057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4672656e537761703a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600d81905580611610611097565b50600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193955091935060009273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561168a57600080fd5b505afa15801561169e573d6000803e3d6000fd5b505050506040513d60208110156116b457600080fd5b5051600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561172d57600080fd5b505afa158015611741573d6000803e3d6000fd5b505050506040513d602081101561175757600080fd5b505190506000611777836dffffffffffffffffffffffffffff8716612ac3565b90506000611795836dffffffffffffffffffffffffffff8716612ac3565b905060006117a38787612f2f565b60005490915080611a4557600654604080517f7cd07e47000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691637cd07e47916004808301926020929190829003018186803b15801561181957600080fd5b505afa15801561182d573d6000803e3d6000fd5b505050506040513d602081101561184357600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166118666129fa565b73ffffffffffffffffffffffffffffffffffffffff161415611995578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b1580156118c857600080fd5b505afa1580156118dc573d6000803e3d6000fd5b505050506040513d60208110156118f257600080fd5b50519950891580159061192557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a14155b61199057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4261642064657369726564206c69717569646974790000000000000000000000604482015290519081900360640190fd5b611a3f565b73ffffffffffffffffffffffffffffffffffffffff811615611a1857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d757374206e6f742068617665206d69677261746f7200000000000000000000604482015290519081900360640190fd5b611a306103e8610d22611a2b8888612a3d565b61309d565b9950611a3f60006103e86130ee565b50611a96565b611a936dffffffffffffffffffffffffffff8916611a638684612a3d565b81611a6a57fe5b046dffffffffffffffffffffffffffff8916611a868685612a3d565b81611a8d57fe5b04613192565b98505b60008911611aef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061342a6027913960400191505060405180910390fd5b611af98a8a6130ee565b611b0586868a8a612b35565b8115611b4157600954611b3d906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612a3d565b600c555b611b496129fa565b73ffffffffffffffffffffffffffffffffffffffff167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f8585604051808381526020018281526020019250505060405180910390a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600c5481565b60046020526000908152604090205481565b600080600d54600114611c4f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4672656e537761703a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600d81905580611c5f611097565b50600754600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965092945073ffffffffffffffffffffffffffffffffffffffff9182169391169160009184916370a08231916024808301926020929190829003018186803b158015611ce157600080fd5b505afa158015611cf5573d6000803e3d6000fd5b505050506040513d6020811015611d0b57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b158015611d7f57600080fd5b505afa158015611d93573d6000803e3d6000fd5b505050506040513d6020811015611da957600080fd5b505130600090815260016020526040812054919250611dc88888612f2f565b60005490915080611dd98487612a3d565b81611de057fe5b049a5080611dee8486612a3d565b81611df557fe5b04995060008b118015611e08575060008a115b611e5d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806133e06027913960400191505060405180910390fd5b611e6730846131aa565b611e72878d8d6127ed565b611e7d868d8c6127ed565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8916916370a08231916024808301926020929190829003018186803b158015611ee957600080fd5b505afa158015611efd573d6000803e3d6000fd5b505050506040513d6020811015611f1357600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191965073ffffffffffffffffffffffffffffffffffffffff8816916370a0823191602480820192602092909190829003018186803b158015611f8557600080fd5b505afa158015611f99573d6000803e3d6000fd5b505050506040513d6020811015611faf57600080fd5b50519350611fbf85858b8b612b35565b8115611ffb57600954611ff7906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612a3d565b600c555b8b73ffffffffffffffffffffffffffffffffffffffff1661201a6129fa565b73ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d604051808381526020018281526020019250505060405180910390a35050505050505050506001600d81905550915091565b6040518060400160405280600381526020017f464c50000000000000000000000000000000000000000000000000000000000081525081565b60055474010000000000000000000000000000000000000000900460ff1681565b60006111006120ec6129fa565b8484612e5a565b6103e881565b600d5460011461216a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4672656e537761703a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600754600854600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9485169490931692612240928592879261223b926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b15801561220957600080fd5b505afa15801561221d573d6000803e3d6000fd5b505050506040513d602081101561223357600080fd5b505190612ac3565b6127ed565b6122dc818461223b6009600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561220957600080fd5b50506001600d5550565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b4284101561238d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4672656e537761703a2045585049524544000000000000000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff80891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa1580156124ee573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061256957508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6125d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4672656e537761703a20494e56414c49445f5349474e41545552450000000000604482015290519081900360640190fd5b6125df898989612deb565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600d5460011461267857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4672656e537761703a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516127e69273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b1580156126ef57600080fd5b505afa158015612703573d6000803e3d6000fd5b505050506040513d602081101561271957600080fd5b5051600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561278c57600080fd5b505afa1580156127a0573d6000803e3d6000fd5b505050506040513d60208110156127b657600080fd5b50516009546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612b35565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b602083106128f357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016128b6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612955576040519150601f19603f3d011682016040523d82523d6000602084013e61295a565b606091505b5091509150818015612988575080511580612988575080806020019051602081101561298557600080fd5b50515b6129f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4672656e537761703a205452414e534645525f4641494c454400000000000000604482015290519081900360640190fd5b5050505050565b6000612a0533611390565b15612a3757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c612a3a565b50335b90565b6000811580612a5857505080820282828281612a5557fe5b04145b61110457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b8082038281111561110457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff8411801590612b6157506dffffffffffffffffffffffffffff8311155b612bcc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4672656e537761703a204f564552464c4f570000000000000000000000000000604482015290519081900360640190fd5b60095463ffffffff428116917c010000000000000000000000000000000000000000000000000000000090048116820390811615801590612c1c57506dffffffffffffffffffffffffffff841615155b8015612c3757506dffffffffffffffffffffffffffff831615155b15612ce1578063ffffffff16612c7485612c5086613263565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690613287565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff8116612cb484612c5087613263565b600b80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600980547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054612e8a9082612ac3565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054612ec690826132c8565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015612f9a57600080fd5b505afa158015612fae573d6000803e3d6000fd5b505050506040513d6020811015612fc457600080fd5b5051600c5473ffffffffffffffffffffffffffffffffffffffff8216158015945091925090613089578015613084576000613015611a2b6dffffffffffffffffffffffffffff888116908816612a3d565b905060006130228361309d565b90508082111561308157600061304461303b8484612ac3565b60005490612a3d565b9050600061305d83613057866005612a3d565b906132c8565b9050600081838161306a57fe5b049050801561307d5761307d87826130ee565b5050505b50505b613095565b8015613095576000600c555b505092915050565b600060038211156130e0575080600160028204015b818110156130da578091506002818285816130c957fe5b0401816130d257fe5b0490506130b2565b506113da565b81156113da57506001919050565b6000546130fb90826132c8565b600090815573ffffffffffffffffffffffffffffffffffffffff831681526001602052604090205461312d90826132c8565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106131a157816131a3565b825b9392505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020546131da9082612ac3565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260408120919091555461320e9082612ac3565b600090815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416816132c057fe5b049392505050565b8082018281101561110457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b6040518060e0016040528060006dffffffffffffffffffffffffffff16815260200160006dffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152509056fe4672656e537761703a204d4554415f54584e535f414c52454144595f44495341424c45444672656e537761703a20494e53554646494349454e545f4f55545055545f414d4f554e544672656e537761703a20494e53554646494349454e545f4c49515549444954595f4255524e45444672656e537761703a20494e53554646494349454e545f494e5055545f414d4f554e544672656e537761703a20494e53554646494349454e545f4c49515549444954595f4d494e5445444672656e537761703a204d4554415f54584e535f414c52454144595f454e41424c4544a2646970667358221220d83748bf632cebef058bf48ee5c65ab2e690b35f5beeeaecaf6c665220c3b25964736f6c634300060c00334672656e537761703a204d4554415f54584e535f414c52454144595f44495341424c45444672656e537761703a204d4554415f54584e535f414c52454144595f454e41424c4544a264697066735822122074b3a58819259cf009dc829ffdd60cae447101c29429d45b4f7337469034849d64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80635e07d17b11610097578063b0cb33fe11610066578063b0cb33fe14610250578063c9c6539614610283578063e6a43905146102be578063f46901ed146102f9576100f5565b80635e07d17b146101af5780636bd7c172146101e25780637cd07e4714610215578063a2e74af61461021d576100f5565b806321dd70e6116100d357806321dd70e61461015057806323cf311814610158578063574f2ba31461018d5780635855a25a146101a7576100f5565b8063017e7e58146100fa578063094b74151461012b5780631e3dd18b14610133575b600080fd5b61010261032c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610102610348565b6101026004803603602081101561014957600080fd5b5035610364565b610102610398565b61018b6004803603602081101561016e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166103b4565b005b610195610481565b60408051918252519081900360200190f35b610195610487565b61018b600480360360208110156101c557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610538565b61018b600480360360208110156101f857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610771565b6101026108c0565b61018b6004803603602081101561023357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108dc565b61018b6004803603602081101561026657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109a9565b6101026004803603604081101561029957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610bc5565b610102600480360360408110156102d457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610ff9565b61018b6004803603602081101561030f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661102c565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6005818154811061037157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff16331461043a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60055490565b604051610496602082016110f9565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106104fa57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016104bd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661064057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4672656e537761703a20504149525f4e4f545f45584953545300000000000000604482015290519081900360640190fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a8c95dc06040518163ffffffff1660e01b815260040160206040518083038186803b15801561068b57600080fd5b505afa15801561069f573d6000803e3d6000fd5b505050506040513d60208110156106b557600080fd5b50511561070d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806146f06023913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663578bb42d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075557600080fd5b505af1158015610769573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107f757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661087957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4672656e537761703a20494e56414c49445f4144445245535300000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff16331461096257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a2f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610ab157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4672656e537761703a20504149525f4e4f545f45584953545300000000000000604482015290519081900360640190fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a8c95dc06040518163ffffffff1660e01b815260040160206040518083038186803b158015610afc57600080fd5b505afa158015610b10573d6000803e3d6000fd5b505050506040513d6020811015610b2657600080fd5b5051610b7d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806146cc6024913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663083836406040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075557600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4672656e537761703a204944454e544943414c5f414444524553534553000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610c9f578385610ca2565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff8216610d2957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4672656e537761703a205a45524f5f4144445245535300000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff828116600090815260046020908152604080832085851684529091529020541615610dca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4672656e537761703a20504149525f4558495354530000000000000000000000604482015290519081900360640190fd5b606060405180602001610ddc906110f9565b6020820181038252601f19601f82011660405250905060008383604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f594508473ffffffffffffffffffffffffffffffffffffffff1663485cc95585856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015610eea57600080fd5b505af1158015610efe573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff84811660008181526004602081815260408084208987168086529083528185208054978d167fffffffffffffffffffffffff000000000000000000000000000000000000000098891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b600460209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110b257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6135c5806111078339019056fe60806040526005805460ff60a01b191690556001600d5534801561002257600080fd5b506040805180820182526011815270233932b729bbb0b8102628102a37b5b2b760791b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fb780362928b9d9f67e42076e4199f6d451483cd96fb2e827a6ac1b7dace85397818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600680546001600160a01b031916331790556134a98061011c6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80635a3d54931161010f578063a9059cbb116100a2578063d21220a711610071578063d21220a714610651578063d505accf14610659578063dd62ed3e146106b7578063fff6cae9146106f2576101e5565b8063a9059cbb146105d5578063ba9a7a561461060e578063bc25cf7714610616578063c45a015514610649576101e5565b80637ecebe00116100de5780637ecebe001461054657806389afcb441461057957806395d89b41146105c5578063a8c95dc0146105cd576101e5565b80635a3d5493146104d05780636a627842146104d857806370a082311461050b5780637464fc3d1461053e576101e5565b806323b872dd11610187578063485cc95511610156578063485cc95514610452578063572b6c051461048d578063578bb42d146104c05780635909c0d5146104c8576101e5565b806323b872dd146103e157806330adf81f14610424578063313ce5671461042c5780633644e5151461044a576101e5565b80630902f1ac116101c35780630902f1ac1461030a578063095ea7b3146103495780630dfe16811461039657806318160ddd146103c7576101e5565b8063022c0d9f146101ea57806306fdde03146102855780630838364014610302575b600080fd5b6102836004803603608081101561020057600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561024457600080fd5b82018360208201111561025657600080fd5b8035906020019184600183028401116401000000008311171561027857600080fd5b5090925090506106fa565b005b61028d610ed4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102c75781810151838201526020016102af565b50505050905090810190601f1680156102f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610283610f0d565b610312611097565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103826004803603604081101561035f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356110ec565b604080519115158252519081900360200190f35b61039e61110a565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103cf611126565b60408051918252519081900360200190f35b610382600480360360608110156103f757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561112c565b6103cf611288565b6104346112ac565b6040805160ff9092168252519081900360200190f35b6103cf6112b1565b6102836004803603604081101561046857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166112b7565b610382600480360360208110156104a357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611390565b6102836113df565b6103cf611581565b6103cf611587565b6103cf600480360360208110156104ee57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661158d565b6103cf6004803603602081101561052157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bb1565b6103cf611bc3565b6103cf6004803603602081101561055c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bc9565b6105ac6004803603602081101561058f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bdb565b6040805192835260208301919091528051918290030190f35b61028d612085565b6103826120be565b610382600480360360408110156105eb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356120df565b6103cf6120f3565b6102836004803603602081101561062c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166120f9565b61039e6122e6565b61039e612302565b610283600480360360e081101561066f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561231e565b6103cf600480360360408110156106cd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166125ea565b610283612607565b600d5460011461076b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4672656e537761703a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600d558415158061077e5750600084115b6107d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806133bc6024913960400191505060405180910390fd5b6107db61333a565b6040518060e0016040528060006dffffffffffffffffffffffffffff16815260200160006dffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815250905061083f611097565b506dffffffffffffffffffffffffffff9081166020840152168082528610801561087c575080602001516dffffffffffffffffffffffffffff1685105b6108e757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4672656e537761703a20494e53554646494349454e545f4c4951554944495459604482015290519081900360640190fd5b601960c082015260075460085473ffffffffffffffffffffffffffffffffffffffff91821691908116908616821480159061094e57508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b6109b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4672656e537761703a20494e56414c49445f544f000000000000000000000000604482015290519081900360640190fd5b87156109ca576109ca82878a6127ed565b86156109db576109db8187896127ed565b8315610aae578573ffffffffffffffffffffffffffffffffffffffff166310d1e85c610a056129fa565b8a8a89896040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610a9557600080fd5b505af1158015610aa9573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610b1a57600080fd5b505afa158015610b2e573d6000803e3d6000fd5b505050506040513d6020811015610b4457600080fd5b505160408085019190915280517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8316916370a08231916024808301926020929190829003018186803b158015610bb957600080fd5b505afa158015610bcd573d6000803e3d6000fd5b505050506040513d6020811015610be357600080fd5b505160608401525050805160408201516dffffffffffffffffffffffffffff90911687900310610c14576000610c32565b8581600001516dffffffffffffffffffffffffffff16038160400151035b8160800181815250508481602001516dffffffffffffffffffffffffffff1603816060015111610c63576000610c81565b8481602001516dffffffffffffffffffffffffffff16038160600151035b60a08201526080810151151580610c9c575060008160a00151115b610cf1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806134076023913960400191505060405180910390fd5b6000610d28610d118360c001518460800151612a3d90919063ffffffff16565b6040840151610d2290612710612a3d565b90612ac3565b90506000610d5b610d4a8460c001518560a00151612a3d90919063ffffffff16565b6060850151610d2290612710612a3d565b9050610da66305f5e100610da085602001516dffffffffffffffffffffffffffff1686600001516dffffffffffffffffffffffffffff16612a3d90919063ffffffff16565b90612a3d565b610db08383612a3d565b1015610e1d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4672656e537761703a204b000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050610e3b8160400151826060015183600001518460200151612b35565b8373ffffffffffffffffffffffffffffffffffffffff16610e5a6129fa565b73ffffffffffffffffffffffffffffffffffffffff167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82283608001518460a001518a8a6040518085815260200184815260200183815260200182815260200194505050505060405180910390a350506001600d5550505050565b6040518060400160405280601181526020017f4672656e53776170204c5020546f6b656e00000000000000000000000000000081525081565b60065473ffffffffffffffffffffffffffffffffffffffff16610f2e6129fa565b73ffffffffffffffffffffffffffffffffffffffff1614610fb057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b60055474010000000000000000000000000000000000000000900460ff16611023576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806133986024913960400191505060405180910390fd5b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556110536129fa565b73ffffffffffffffffffffffffffffffffffffffff167f096be170ccc67847e55535e7d8334b2afedd95805baedc160005addb9144745060405160405180910390a2565b6009546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b60006111006110f96129fa565b8484612deb565b5060015b92915050565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908261117c6129fa565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146112735773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020526040812061121d918491906111f06129fa565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205490612ac3565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602052604081209061124b6129fa565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020555b61127e848484612e5a565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b60065473ffffffffffffffffffffffffffffffffffffffff16331461133d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b6007805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560088054929093169116179055565b60055460009074010000000000000000000000000000000000000000900460ff1680156113d7575060055473ffffffffffffffffffffffffffffffffffffffff8381169116145b90505b919050565b60065473ffffffffffffffffffffffffffffffffffffffff166114006129fa565b73ffffffffffffffffffffffffffffffffffffffff161461148257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4672656e537761703a20464f5242494444454e00000000000000000000000000604482015290519081900360640190fd5b60055474010000000000000000000000000000000000000000900460ff16156114f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806134516023913960400191505060405180910390fd5b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017905561153d6129fa565b73ffffffffffffffffffffffffffffffffffffffff167f92e4c08d47b71e8dc051232b8e475ec296489a67a4ba5cca88ff20fb6ac499e660405160405180910390a2565b600a5481565b600b5481565b6000600d5460011461160057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4672656e537761703a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600d81905580611610611097565b50600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193955091935060009273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561168a57600080fd5b505afa15801561169e573d6000803e3d6000fd5b505050506040513d60208110156116b457600080fd5b5051600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561172d57600080fd5b505afa158015611741573d6000803e3d6000fd5b505050506040513d602081101561175757600080fd5b505190506000611777836dffffffffffffffffffffffffffff8716612ac3565b90506000611795836dffffffffffffffffffffffffffff8716612ac3565b905060006117a38787612f2f565b60005490915080611a4557600654604080517f7cd07e47000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691637cd07e47916004808301926020929190829003018186803b15801561181957600080fd5b505afa15801561182d573d6000803e3d6000fd5b505050506040513d602081101561184357600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166118666129fa565b73ffffffffffffffffffffffffffffffffffffffff161415611995578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b1580156118c857600080fd5b505afa1580156118dc573d6000803e3d6000fd5b505050506040513d60208110156118f257600080fd5b50519950891580159061192557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a14155b61199057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4261642064657369726564206c69717569646974790000000000000000000000604482015290519081900360640190fd5b611a3f565b73ffffffffffffffffffffffffffffffffffffffff811615611a1857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d757374206e6f742068617665206d69677261746f7200000000000000000000604482015290519081900360640190fd5b611a306103e8610d22611a2b8888612a3d565b61309d565b9950611a3f60006103e86130ee565b50611a96565b611a936dffffffffffffffffffffffffffff8916611a638684612a3d565b81611a6a57fe5b046dffffffffffffffffffffffffffff8916611a868685612a3d565b81611a8d57fe5b04613192565b98505b60008911611aef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061342a6027913960400191505060405180910390fd5b611af98a8a6130ee565b611b0586868a8a612b35565b8115611b4157600954611b3d906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612a3d565b600c555b611b496129fa565b73ffffffffffffffffffffffffffffffffffffffff167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f8585604051808381526020018281526020019250505060405180910390a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600c5481565b60046020526000908152604090205481565b600080600d54600114611c4f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4672656e537761703a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600d81905580611c5f611097565b50600754600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965092945073ffffffffffffffffffffffffffffffffffffffff9182169391169160009184916370a08231916024808301926020929190829003018186803b158015611ce157600080fd5b505afa158015611cf5573d6000803e3d6000fd5b505050506040513d6020811015611d0b57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b158015611d7f57600080fd5b505afa158015611d93573d6000803e3d6000fd5b505050506040513d6020811015611da957600080fd5b505130600090815260016020526040812054919250611dc88888612f2f565b60005490915080611dd98487612a3d565b81611de057fe5b049a5080611dee8486612a3d565b81611df557fe5b04995060008b118015611e08575060008a115b611e5d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806133e06027913960400191505060405180910390fd5b611e6730846131aa565b611e72878d8d6127ed565b611e7d868d8c6127ed565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8916916370a08231916024808301926020929190829003018186803b158015611ee957600080fd5b505afa158015611efd573d6000803e3d6000fd5b505050506040513d6020811015611f1357600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191965073ffffffffffffffffffffffffffffffffffffffff8816916370a0823191602480820192602092909190829003018186803b158015611f8557600080fd5b505afa158015611f99573d6000803e3d6000fd5b505050506040513d6020811015611faf57600080fd5b50519350611fbf85858b8b612b35565b8115611ffb57600954611ff7906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612a3d565b600c555b8b73ffffffffffffffffffffffffffffffffffffffff1661201a6129fa565b73ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d604051808381526020018281526020019250505060405180910390a35050505050505050506001600d81905550915091565b6040518060400160405280600381526020017f464c50000000000000000000000000000000000000000000000000000000000081525081565b60055474010000000000000000000000000000000000000000900460ff1681565b60006111006120ec6129fa565b8484612e5a565b6103e881565b600d5460011461216a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4672656e537761703a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600754600854600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9485169490931692612240928592879261223b926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b15801561220957600080fd5b505afa15801561221d573d6000803e3d6000fd5b505050506040513d602081101561223357600080fd5b505190612ac3565b6127ed565b6122dc818461223b6009600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561220957600080fd5b50506001600d5550565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b4284101561238d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4672656e537761703a2045585049524544000000000000000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff80891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa1580156124ee573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061256957508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6125d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4672656e537761703a20494e56414c49445f5349474e41545552450000000000604482015290519081900360640190fd5b6125df898989612deb565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600d5460011461267857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4672656e537761703a204c4f434b454400000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516127e69273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b1580156126ef57600080fd5b505afa158015612703573d6000803e3d6000fd5b505050506040513d602081101561271957600080fd5b5051600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561278c57600080fd5b505afa1580156127a0573d6000803e3d6000fd5b505050506040513d60208110156127b657600080fd5b50516009546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612b35565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b602083106128f357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016128b6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612955576040519150601f19603f3d011682016040523d82523d6000602084013e61295a565b606091505b5091509150818015612988575080511580612988575080806020019051602081101561298557600080fd5b50515b6129f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4672656e537761703a205452414e534645525f4641494c454400000000000000604482015290519081900360640190fd5b5050505050565b6000612a0533611390565b15612a3757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c612a3a565b50335b90565b6000811580612a5857505080820282828281612a5557fe5b04145b61110457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b8082038281111561110457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff8411801590612b6157506dffffffffffffffffffffffffffff8311155b612bcc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4672656e537761703a204f564552464c4f570000000000000000000000000000604482015290519081900360640190fd5b60095463ffffffff428116917c010000000000000000000000000000000000000000000000000000000090048116820390811615801590612c1c57506dffffffffffffffffffffffffffff841615155b8015612c3757506dffffffffffffffffffffffffffff831615155b15612ce1578063ffffffff16612c7485612c5086613263565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690613287565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff8116612cb484612c5087613263565b600b80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600980547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054612e8a9082612ac3565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054612ec690826132c8565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015612f9a57600080fd5b505afa158015612fae573d6000803e3d6000fd5b505050506040513d6020811015612fc457600080fd5b5051600c5473ffffffffffffffffffffffffffffffffffffffff8216158015945091925090613089578015613084576000613015611a2b6dffffffffffffffffffffffffffff888116908816612a3d565b905060006130228361309d565b90508082111561308157600061304461303b8484612ac3565b60005490612a3d565b9050600061305d83613057866005612a3d565b906132c8565b9050600081838161306a57fe5b049050801561307d5761307d87826130ee565b5050505b50505b613095565b8015613095576000600c555b505092915050565b600060038211156130e0575080600160028204015b818110156130da578091506002818285816130c957fe5b0401816130d257fe5b0490506130b2565b506113da565b81156113da57506001919050565b6000546130fb90826132c8565b600090815573ffffffffffffffffffffffffffffffffffffffff831681526001602052604090205461312d90826132c8565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106131a157816131a3565b825b9392505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020546131da9082612ac3565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260408120919091555461320e9082612ac3565b600090815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416816132c057fe5b049392505050565b8082018281101561110457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b6040518060e0016040528060006dffffffffffffffffffffffffffff16815260200160006dffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152509056fe4672656e537761703a204d4554415f54584e535f414c52454144595f44495341424c45444672656e537761703a20494e53554646494349454e545f4f55545055545f414d4f554e544672656e537761703a20494e53554646494349454e545f4c49515549444954595f4255524e45444672656e537761703a20494e53554646494349454e545f494e5055545f414d4f554e544672656e537761703a20494e53554646494349454e545f4c49515549444954595f4d494e5445444672656e537761703a204d4554415f54584e535f414c52454144595f454e41424c4544a2646970667358221220d83748bf632cebef058bf48ee5c65ab2e690b35f5beeeaecaf6c665220c3b25964736f6c634300060c00334672656e537761703a204d4554415f54584e535f414c52454144595f44495341424c45444672656e537761703a204d4554415f54584e535f414c52454144595f454e41424c4544a264697066735822122074b3a58819259cf009dc829ffdd60cae447101c29429d45b4f7337469034849d64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 477,
        "contract": "contracts/uniswapv2/FrenFactory.sol:FrenFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 480,
        "contract": "contracts/uniswapv2/FrenFactory.sol:FrenFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 483,
        "contract": "contracts/uniswapv2/FrenFactory.sol:FrenFactory",
        "label": "migrator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 486,
        "contract": "contracts/uniswapv2/FrenFactory.sol:FrenFactory",
        "label": "auro",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 493,
        "contract": "contracts/uniswapv2/FrenFactory.sol:FrenFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 497,
        "contract": "contracts/uniswapv2/FrenFactory.sol:FrenFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}