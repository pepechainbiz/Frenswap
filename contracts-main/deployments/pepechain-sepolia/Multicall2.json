{
  "address": "0x9CFfe912528B1e55d8b6471D7aE483f44eD655fB",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getL1BlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "l1BlockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e88d97555b82477a21011eaa670e37fd37db43420042fb85f9d374f2adee8d3",
  "receipt": {
    "to": null,
    "from": "0x5Db6efF839FcDed2b264C6eAAF0A177E58Cf0c6d",
    "contractAddress": "0x9CFfe912528B1e55d8b6471D7aE483f44eD655fB",
    "transactionIndex": 1,
    "gasUsed": "809568",
    "logsBloom": "0x
    "blockHash": "0xf5eb6d3be0a5e1e1b34829d4656c61253e1835c7f86c4ad79036a3d85080dadc",
    "transactionHash": "0x0e88d97555b82477a21011eaa670e37fd37db43420042fb85f9d374f2adee8d3",
    "logs": [],
    "blockNumber": 2053,
    "cumulativeGasUsed": "853482",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "90d0c7418486a3e90067722ce16e7624",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1BlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"l1BlockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Multicall2 - Aggregate results from multiple read-only function calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/Multicall2.sol\":\"Multicall2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/helpers/Multicall2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface ArbSys {\\n    /**\\n    * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n    * @return block number as int\\n     */ \\n    function arbBlockNumber() external view returns (uint);\\n}\\n\\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract Multicall2 {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\\n        blockNumber = ArbSys(address(100)).arbBlockNumber();\\n        returnData = new bytes[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n            require(success, \\\"Multicall aggregate: call failed\\\");\\n            returnData[i] = ret;\\n        }\\n    }\\n    function blockAndAggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\\n    }\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n    function getBlockNumber() public view returns (uint256 blockNumber) {\\n        blockNumber = ArbSys(address(100)).arbBlockNumber();\\n    }\\n    function getL1BlockNumber() public view returns (uint256 l1BlockNumber) {\\n        l1BlockNumber = block.number;\\n    }\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n        difficulty = block.difficulty;\\n    }\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(ArbSys(address(100)).arbBlockNumber() - 1);\\n    }\\n    function tryAggregate(bool requireSuccess, Call[] memory calls) public returns (Result[] memory returnData) {\\n        returnData = new Result[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n\\n            if (requireSuccess) {\\n                require(success, \\\"Multicall2 aggregate: call failed\\\");\\n            }\\n\\n            returnData[i] = Result(success, ret);\\n        }\\n    }\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        blockNumber = ArbSys(address(100)).arbBlockNumber();\\n        blockHash = blockhash(ArbSys(address(100)).arbBlockNumber());\\n        returnData = tryAggregate(requireSuccess, calls);\\n    }\\n}\",\"keccak256\":\"0x78f78fa92bdee9c9959fcea760528701da3105fb50ac8021fd148beb62d0e49e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610db7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806372425d9d1161008c578063b9b3efe911610066578063b9b3efe91461018e578063bce38bd714610194578063c3077fa9146101b4578063ee82ac5e146101c757600080fd5b806372425d9d1461017457806386d516e81461017a578063a8b0574e1461018057600080fd5b8063399542e9116100bd578063399542e91461012257806342cbb15c146101445780634d2301cc1461014c57600080fd5b80630f28c97d146100e4578063252dba42146100f957806327e86d6e1461011a575b600080fd5b425b6040519081526020015b60405180910390f35b61010c610107366004610a34565b6101d9565b6040516100f0929190610adf565b6100e66103f9565b610135610130366004610b67565b61047d565b6040516100f093929190610c27565b6100e661057a565b6100e661015a366004610c4f565b73ffffffffffffffffffffffffffffffffffffffff163190565b446100e6565b456100e6565b6040514181526020016100f0565b436100e6565b6101a76101a2366004610b67565b6105f1565b6040516100f09190610c71565b6101356101c2366004610a34565b6107ee565b6100e66101d5366004610c84565b4090565b60006060606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024d9190610c9d565b9150825167ffffffffffffffff8111156102695761026961080b565b60405190808252806020026020018201604052801561029c57816020015b60608152602001906001900390816102875790505b50905060005b83518110156103f3576000808583815181106102c0576102c0610cb6565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168684815181106102f4576102f4610cb6565b60200260200101516020015160405161030d9190610ce5565b6000604051808303816000865af19150503d806000811461034a576040519150601f19603f3d011682016040523d82523d6000602084013e61034f565b606091505b5091509150816103c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460448201526064015b60405180910390fd5b808484815181106103d3576103d3610cb6565b6020026020010181905250505080806103eb90610d30565b9150506102a2565b50915091565b60006001606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046d9190610c9d565b6104779190610d68565b40905090565b6000806060606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f29190610c9d565b9250606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105649190610c9d565b40915061057185856105f1565b90509250925092565b6000606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec9190610c9d565b905090565b6060815167ffffffffffffffff81111561060d5761060d61080b565b60405190808252806020026020018201604052801561065357816020015b60408051808201909152600081526060602082015281526020019060019003908161062b5790505b50905060005b82518110156107e75760008084838151811061067757610677610cb6565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168584815181106106ab576106ab610cb6565b6020026020010151602001516040516106c49190610ce5565b6000604051808303816000865af19150503d8060008114610701576040519150601f19603f3d011682016040523d82523d6000602084013e610706565b606091505b5091509150851561079e578161079e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016103b7565b60405180604001604052808315158152602001828152508484815181106107c7576107c7610cb6565b6020026020010181905250505080806107df90610d30565b915050610659565b5092915050565b60008060606107fe60018561047d565b9196909550909350915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561085d5761085d61080b565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156108aa576108aa61080b565b604052919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146108d657600080fd5b919050565b6000601f83818401126108ed57600080fd5b8235602067ffffffffffffffff8083111561090a5761090a61080b565b8260051b610919838201610863565b938452868101830193838101908986111561093357600080fd5b84890192505b85831015610a27578235848111156109515760008081fd5b890160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828d0381018213156109885760008081fd5b61099061083a565b61099b8985016108b2565b815282840135888111156109af5760008081fd5b8085019450508d603f8501126109c55760008081fd5b88840135888111156109d9576109d961080b565b6109e88a848e84011601610863565b92508083528e848287010111156109ff5760008081fd5b808486018b85013760009083018a015280890191909152845250509184019190840190610939565b9998505050505050505050565b600060208284031215610a4657600080fd5b813567ffffffffffffffff811115610a5d57600080fd5b610a69848285016108db565b949350505050565b60005b83811015610a8c578181015183820152602001610a74565b50506000910152565b60008151808452610aad816020860160208601610a71565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610b59577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452610b47868351610a95565b95509284019290840190600101610b0d565b509398975050505050505050565b60008060408385031215610b7a57600080fd5b82358015158114610b8a57600080fd5b9150602083013567ffffffffffffffff811115610ba657600080fd5b610bb2858286016108db565b9150509250929050565b600081518084526020808501808196508360051b8101915082860160005b85811015610c1a57828403895281518051151585528501516040868601819052610c0681870183610a95565b9a87019a9550505090840190600101610bda565b5091979650505050505050565b838152826020820152606060408201526000610c466060830184610bbc565b95945050505050565b600060208284031215610c6157600080fd5b610c6a826108b2565b9392505050565b602081526000610c6a6020830184610bbc565b600060208284031215610c9657600080fd5b5035919050565b600060208284031215610caf57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008251610cf7818460208701610a71565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d6157610d61610d01565b5060010190565b81810381811115610d7b57610d7b610d01565b9291505056fea26469706673582212207a009f748a07ad3194a53fcfb840524659480154d45d24beedcfe24d3f078c6164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c806372425d9d1161008c578063b9b3efe911610066578063b9b3efe91461018e578063bce38bd714610194578063c3077fa9146101b4578063ee82ac5e146101c757600080fd5b806372425d9d1461017457806386d516e81461017a578063a8b0574e1461018057600080fd5b8063399542e9116100bd578063399542e91461012257806342cbb15c146101445780634d2301cc1461014c57600080fd5b80630f28c97d146100e4578063252dba42146100f957806327e86d6e1461011a575b600080fd5b425b6040519081526020015b60405180910390f35b61010c610107366004610a34565b6101d9565b6040516100f0929190610adf565b6100e66103f9565b610135610130366004610b67565b61047d565b6040516100f093929190610c27565b6100e661057a565b6100e661015a366004610c4f565b73ffffffffffffffffffffffffffffffffffffffff163190565b446100e6565b456100e6565b6040514181526020016100f0565b436100e6565b6101a76101a2366004610b67565b6105f1565b6040516100f09190610c71565b6101356101c2366004610a34565b6107ee565b6100e66101d5366004610c84565b4090565b60006060606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024d9190610c9d565b9150825167ffffffffffffffff8111156102695761026961080b565b60405190808252806020026020018201604052801561029c57816020015b60608152602001906001900390816102875790505b50905060005b83518110156103f3576000808583815181106102c0576102c0610cb6565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168684815181106102f4576102f4610cb6565b60200260200101516020015160405161030d9190610ce5565b6000604051808303816000865af19150503d806000811461034a576040519150601f19603f3d011682016040523d82523d6000602084013e61034f565b606091505b5091509150816103c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460448201526064015b60405180910390fd5b808484815181106103d3576103d3610cb6565b6020026020010181905250505080806103eb90610d30565b9150506102a2565b50915091565b60006001606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046d9190610c9d565b6104779190610d68565b40905090565b6000806060606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f29190610c9d565b9250606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105649190610c9d565b40915061057185856105f1565b90509250925092565b6000606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec9190610c9d565b905090565b6060815167ffffffffffffffff81111561060d5761060d61080b565b60405190808252806020026020018201604052801561065357816020015b60408051808201909152600081526060602082015281526020019060019003908161062b5790505b50905060005b82518110156107e75760008084838151811061067757610677610cb6565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168584815181106106ab576106ab610cb6565b6020026020010151602001516040516106c49190610ce5565b6000604051808303816000865af19150503d8060008114610701576040519150601f19603f3d011682016040523d82523d6000602084013e610706565b606091505b5091509150851561079e578161079e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016103b7565b60405180604001604052808315158152602001828152508484815181106107c7576107c7610cb6565b6020026020010181905250505080806107df90610d30565b915050610659565b5092915050565b60008060606107fe60018561047d565b9196909550909350915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561085d5761085d61080b565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156108aa576108aa61080b565b604052919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146108d657600080fd5b919050565b6000601f83818401126108ed57600080fd5b8235602067ffffffffffffffff8083111561090a5761090a61080b565b8260051b610919838201610863565b938452868101830193838101908986111561093357600080fd5b84890192505b85831015610a27578235848111156109515760008081fd5b890160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828d0381018213156109885760008081fd5b61099061083a565b61099b8985016108b2565b815282840135888111156109af5760008081fd5b8085019450508d603f8501126109c55760008081fd5b88840135888111156109d9576109d961080b565b6109e88a848e84011601610863565b92508083528e848287010111156109ff5760008081fd5b808486018b85013760009083018a015280890191909152845250509184019190840190610939565b9998505050505050505050565b600060208284031215610a4657600080fd5b813567ffffffffffffffff811115610a5d57600080fd5b610a69848285016108db565b949350505050565b60005b83811015610a8c578181015183820152602001610a74565b50506000910152565b60008151808452610aad816020860160208601610a71565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610b59577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452610b47868351610a95565b95509284019290840190600101610b0d565b509398975050505050505050565b60008060408385031215610b7a57600080fd5b82358015158114610b8a57600080fd5b9150602083013567ffffffffffffffff811115610ba657600080fd5b610bb2858286016108db565b9150509250929050565b600081518084526020808501808196508360051b8101915082860160005b85811015610c1a57828403895281518051151585528501516040868601819052610c0681870183610a95565b9a87019a9550505090840190600101610bda565b5091979650505050505050565b838152826020820152606060408201526000610c466060830184610bbc565b95945050505050565b600060208284031215610c6157600080fd5b610c6a826108b2565b9392505050565b602081526000610c6a6020830184610bbc565b600060208284031215610c9657600080fd5b5035919050565b600060208284031215610caf57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008251610cf7818460208701610a71565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d6157610d61610d01565b5060010190565b81810381811115610d7b57610d7b610d01565b9291505056fea26469706673582212207a009f748a07ad3194a53fcfb840524659480154d45d24beedcfe24d3f078c6164736f6c63430008110033",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "kind": "dev",
    "methods": {},
    "title": "Multicall2 - Aggregate results from multiple read-only function calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}